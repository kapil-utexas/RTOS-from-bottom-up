


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************/
    2 00000000         ; OS.s: low-level OS commands, written in assembly      
                                        */
    3 00000000         ; Runs on LM4F120/TM4C123
    4 00000000         ; OS functions.
    5 00000000         ; Ramon Villar, Kapil
    6 00000000         ; February, 9, 2016
    7 00000000         
    8 00000000         
    9 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   10 00000000                 THUMB
   11 00000000                 REQUIRE8
   12 00000000                 PRESERVE8
   13 00000000                 EXTERN           processPool
   14 00000000                 EXTERN           RunPt       ; currently running
                                                             thread
   15 00000000                 EXTERN           traverseSleep
   16 00000000                 EXTERN           switched
   17 00000000                 EXTERN           nextBeforeSwitch
   18 00000000                 EXTERN           higherPriorityAdded
   19 00000000                 EXTERN           SchedulerPt
   20 00000000                 EXTERN           currentProcess
   21 00000000                 EXPORT           OS_DisableInterrupts
   22 00000000                 EXPORT           OS_EnableInterrupts
   23 00000000                 EXPORT           PendSV_Handler
   24 00000000                 EXPORT           SysTick_Handler
   25 00000000                 EXPORT           StartOS
   26 00000000         
   27 00000000         
   28 00000000         
   29 00000000         
   30 00000000         
   31 00000000         OS_DisableInterrupts
   32 00000000 B672            CPSID            I
   33 00000002 4770            BX               LR
   34 00000004         
   35 00000004         
   36 00000004         OS_EnableInterrupts
   37 00000004 B662            CPSIE            I
   38 00000006 4770            BX               LR
   39 00000008         
   40 00000008         StartOS
   41 00000008 4841            LDR              R0, =RunPt
   42 0000000A 6802            LDR              R2, [R0]
   43 0000000C F8D2 D000       LDR              SP, [R2]    ;load localSP
   44 00000010 E8BD 0FF0       POP              {R4-R11}
   45 00000014 BC0F            POP              {R0-R3}
   46 00000016 F85D CB04       POP              {R12}
   47 0000001A F85D EB04       POP              {LR}        ;trash LR
   48 0000001E F85D EB04       POP              {LR}        ;PC on stack. the o
                                                            nly register that i
                                                            s not trash. points
                                                             to function that w
                                                            e want to run
   49 00000022 BC02            POP              {R1}        ;discards last one 
                                                            PSR
   50 00000024 B662            CPSIE            I



ARM Macro Assembler    Page 2 


   51 00000026 4770            BX               LR          ;LR contains the PC
                                                             we want to return 
                                                            to
   52 00000028         
   53 00000028         
   54 00000028         
   55 00000028         PendSV_Handler                       ; 1) Saves R0-R3,R1
                                                            2,LR,PC,PSR
   56 00000028 B672            CPSID            I
   57 0000002A E92D 0FF0       PUSH{R4-R11}                 ;push remaining reg
                                                            isters
   58 0000002E 4838            LDR              R0, =RunPt  ;old run pointer
   59 00000030 6801            LDR              R1, [R0]    ;now R1 points the 
                                                            the current TCB run
                                                            ning
   60 00000032         ;this means R1 = TCB.localSP  
   61 00000032 F8C1 D000       STR              SP, [R1]    ;store stack into l
                                                            ocal stack pointer 
                                                            of TCB
   62 00000036         ;need to check if we went to sleep or killed 
   63 00000036 4A37            LDR              R2, =switched ;8bit variable
   64 00000038 7813            LDRB             R3, [R2]    ;loadvalue of flag
   65 0000003A 2B00            CMP              R3, #0
   66 0000003C D10D            BNE              Switch_Routine
   67 0000003E 4A36            LDR              R2, =higherPriorityAdded
   68 00000040 7813            LDRB             R3, [R2]    ;load value of flag
                                                            ... if 1, a higher 
                                                            priority was added 
                                                            and need to update 
                                                            runpt to beginning 
                                                            of list
   69 00000042 2B00            CMP              R3, #0
   70 00000044 D100            BNE              Higher_Priority_Switch
   71 00000046 D011            BEQ              Normal_Context_Switch
   72 00000048         Higher_Priority_Switch
   73 00000048 F04F 0300       MOV              R3,#0       ;constant to clear 
                                                            the flag
   74 0000004C 7013            STRB             R3,[R2]     ;clear the flag, fl
                                                            ag was 1
   75 0000004E 4933            LDR              R1, =SchedulerPt
   76 00000050 6809            LDR              R1, [R1]    ;R1 now points to h
                                                            igher priority thre
                                                            ad
   77 00000052 6001            STR              R1, [R0]    ;update runPt
   78 00000054 F8D1 D000       LDR              SP, [R1]    ;localSp to SP
   79 00000058 E00C            B                END_ROUTINE
   80 0000005A         Switch_Routine                       ;used for kill and 
                                                            sleep
   81 0000005A F04F 0300       MOV              R3,#0
   82 0000005E 7013            STRB             R3, [R2]    ;clear the flag
   83 00000060 492F            LDR              R1, =nextBeforeSwitch
   84 00000062 6809            LDR              R1, [R1]    ;now points to tcb 
                                                            that we want to run
                                                            
   85 00000064 6001            STR              R1, [R0]    ;update runPT
   86 00000066 F8D1 D000       LDR              SP, [R1]
   87 0000006A E003            B                END_ROUTINE
   88 0000006C         Normal_Context_Switch
   89 0000006C 6849            LDR              R1, [R1,#4] ;load nextpt



ARM Macro Assembler    Page 3 


   90 0000006E 6001            STR              R1, [R0]    ;update RunPt
   91 00000070 F8D1 D000       LDR              SP, [R1]    ;R1 points to the f
                                                            irst element of the
                                                             struct we want to 
                                                            switch to
   92 00000074         END_ROUTINE
   93 00000074 E8BD 0FF0       POP              {R4-R11}    ;pop remainining re
                                                            gisters
   94 00000078 E92D 01F0       PUSH{R4-R8}
   95 0000007C 4C24            LDR              R4, =RunPt
   96 0000007E 6824            LDR              R4,[R4]
   97 00000080 69A5            LDR              R5, [R4,#24] ;load Process ID 
   98 00000082 B440            PUSH{R6}
   99 00000084 4E27            LDR              R6, =currentProcess
  100 00000086 6035            STR              R5, [R6]
  101 00000088 BC40            POP{R6}
  102 0000008A 4E27            LDR              R6, =processPool
  103 0000008C 6836            LDR              R6, [R6]
  104 0000008E F04F 0811       MOV              R8, #17
  105 00000092 FB05 F708       MUL              R7, R5, R8  ;17 is size of PCB
  106 00000096 F107 0708       ADD              R7, R7, #8  ;add offset for dat
                                                            a segment
  107 0000009A 59F7            LDR              R7, [R6,R7]
  108 0000009C 683F            LDR              R7,[R7]
  109 0000009E 46B9            MOV              R9, R7      ;update R9
  110 000000A0 E8BD 01F0       POP{R4-R8}
  111 000000A4         ;need to set R9
  112 000000A4 B662            CPSIE            I
  113 000000A6 4770            BX               LR
  114 000000A8         
  115 000000A8         
  116 000000A8         SVC_Handler
  117 000000A8 B672            CPSID            I
  118 000000AA F8DD C018       LDR              R12, [SP,#24]
  119 000000AE F83C CC02       LDRH             R12, [R12,#-2]
  120 000000B2 F42C 4C7F       BIC              R12, #0xFF00
  121 000000B6 E89D 000F       LDM              SP, {R0-R3}
  122 000000BA B500            PUSH{LR}
  123 000000BC F1BC 0F00       CMP              R12, #0
  124 000000C0 D00B            BEQ              OS_Id
  125 000000C2 F1BC 0F01       CMP              R12, #1
  126 000000C6 D00B            BEQ              OS_Kill
  127 000000C8 F1BC 0F02       CMP              R12, #2
  128 000000CC D00B            BEQ              OS_Sleep
  129 000000CE F1BC 0F03       CMP              R12, #3
  130 000000D2 D00B            BEQ              OS_Time
  131 000000D4 F1BC 0F04       CMP              R12, #4
  132 000000D8 D00B            BEQ              OS_AddThread
  133 000000DA         OS_Id
  134 000000DA F7FF FFFE       BL               OS_Id
  135 000000DE E00B            B                Finished
  136 000000E0         OS_Kill
  137 000000E0 F7FF FFFE       BL               OS_Kill
  138 000000E4 E008            B                Finished
  139 000000E6         OS_Sleep
  140 000000E6 F7FF FFFE       BL               OS_Sleep
  141 000000EA E005            B                Finished
  142 000000EC         OS_Time
  143 000000EC F7FF FFFE       BL               OS_Time



ARM Macro Assembler    Page 4 


  144 000000F0 E002            B                Finished
  145 000000F2         OS_AddThread
  146 000000F2 F7FF FFFE       BL               OS_AddThread
  147 000000F6 E7FF            B                Finished
  148 000000F8         Finished
  149 000000F8 F85D EB04       POP{LR}
  150 000000FC B662            CPSIE            I
  151 000000FE 4770            BX               LR
  152 00000100         
  153 00000100         
  154 00000100         SysTick_Handler                      ; 1) Saves R0-R3,R1
                                                            2,LR,PC,PSR
  155 00000100 B672            CPSID            I
  156 00000102         ;PUSH{R4-R11} ;push remaining registers
  157 00000102         ;LDR R0, =RunPt ;old run pointer
  158 00000102         ;LDR R1, [R0] ;now R1 points the the current TCB running
                       
  159 00000102         ;this means R1 = TCB.localSP  
  160 00000102         ;STR SP, [R1] ;store stack into local stack pointer of T
                       CB
  161 00000102         ;added
  162 00000102 B503            PUSH{R0-R1,      LR}
  163 00000104 F7FF FFFE       BL               traverseSleep
  164 00000108 E8BD 4003       POP{R0-R1,       LR}
  165 0000010C         ;added
  166 0000010C         ;LDR R1, [R1,#4] ;load nextpt
  167 0000010C         ;STR R1, [R0] ;update RunPt
  168 0000010C         ;LDR SP, [R1] ;R1 points to the first element of the str
                       uct we want to switch to
  169 0000010C         ;POP {R4-R11} ;pop remainining registers
  170 0000010C B662            CPSIE            I
  171 0000010E 4770            BX               LR
  172 00000110         
  173 00000110         
  174 00000110                 ALIGN
  175 00000110                 END
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\osasm.
d -o.\osasm.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --predefine="__EVAL SETA 1" --list=.\osasm.lst OSasm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 9 in file OSasm.s
   Uses
      None
Comment: .text unused
END_ROUTINE 00000074

Symbol: END_ROUTINE
   Definitions
      At line 92 in file OSasm.s
   Uses
      At line 79 in file OSasm.s
      At line 87 in file OSasm.s

Finished 000000F8

Symbol: Finished
   Definitions
      At line 148 in file OSasm.s
   Uses
      At line 135 in file OSasm.s
      At line 138 in file OSasm.s
      At line 141 in file OSasm.s
      At line 144 in file OSasm.s
      At line 147 in file OSasm.s

Higher_Priority_Switch 00000048

Symbol: Higher_Priority_Switch
   Definitions
      At line 72 in file OSasm.s
   Uses
      At line 70 in file OSasm.s
Comment: Higher_Priority_Switch used once
Normal_Context_Switch 0000006C

Symbol: Normal_Context_Switch
   Definitions
      At line 88 in file OSasm.s
   Uses
      At line 71 in file OSasm.s
Comment: Normal_Context_Switch used once
OS_AddThread 000000F2

Symbol: OS_AddThread
   Definitions
      At line 145 in file OSasm.s
   Uses
      At line 132 in file OSasm.s
      At line 146 in file OSasm.s

OS_DisableInterrupts 00000000

Symbol: OS_DisableInterrupts
   Definitions
      At line 31 in file OSasm.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 21 in file OSasm.s
Comment: OS_DisableInterrupts used once
OS_EnableInterrupts 00000004

Symbol: OS_EnableInterrupts
   Definitions
      At line 36 in file OSasm.s
   Uses
      At line 22 in file OSasm.s
Comment: OS_EnableInterrupts used once
OS_Id 000000DA

Symbol: OS_Id
   Definitions
      At line 133 in file OSasm.s
   Uses
      At line 124 in file OSasm.s
      At line 134 in file OSasm.s

OS_Kill 000000E0

Symbol: OS_Kill
   Definitions
      At line 136 in file OSasm.s
   Uses
      At line 126 in file OSasm.s
      At line 137 in file OSasm.s

OS_Sleep 000000E6

Symbol: OS_Sleep
   Definitions
      At line 139 in file OSasm.s
   Uses
      At line 128 in file OSasm.s
      At line 140 in file OSasm.s

OS_Time 000000EC

Symbol: OS_Time
   Definitions
      At line 142 in file OSasm.s
   Uses
      At line 130 in file OSasm.s
      At line 143 in file OSasm.s

PendSV_Handler 00000028

Symbol: PendSV_Handler
   Definitions
      At line 55 in file OSasm.s
   Uses
      At line 23 in file OSasm.s
Comment: PendSV_Handler used once
SVC_Handler 000000A8

Symbol: SVC_Handler
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 116 in file OSasm.s
   Uses
      None
Comment: SVC_Handler unused
StartOS 00000008

Symbol: StartOS
   Definitions
      At line 40 in file OSasm.s
   Uses
      At line 25 in file OSasm.s
Comment: StartOS used once
Switch_Routine 0000005A

Symbol: Switch_Routine
   Definitions
      At line 80 in file OSasm.s
   Uses
      At line 66 in file OSasm.s
Comment: Switch_Routine used once
SysTick_Handler 00000100

Symbol: SysTick_Handler
   Definitions
      At line 154 in file OSasm.s
   Uses
      At line 24 in file OSasm.s
Comment: SysTick_Handler used once
17 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

RunPt 00000000

Symbol: RunPt
   Definitions
      At line 14 in file OSasm.s
   Uses
      At line 41 in file OSasm.s
      At line 58 in file OSasm.s
      At line 95 in file OSasm.s

SchedulerPt 00000000

Symbol: SchedulerPt
   Definitions
      At line 19 in file OSasm.s
   Uses
      At line 75 in file OSasm.s
Comment: SchedulerPt used once
currentProcess 00000000

Symbol: currentProcess
   Definitions
      At line 20 in file OSasm.s
   Uses
      At line 99 in file OSasm.s
Comment: currentProcess used once
higherPriorityAdded 00000000

Symbol: higherPriorityAdded
   Definitions
      At line 18 in file OSasm.s
   Uses
      At line 67 in file OSasm.s
Comment: higherPriorityAdded used once
nextBeforeSwitch 00000000

Symbol: nextBeforeSwitch
   Definitions
      At line 17 in file OSasm.s
   Uses
      At line 83 in file OSasm.s
Comment: nextBeforeSwitch used once
processPool 00000000

Symbol: processPool
   Definitions
      At line 13 in file OSasm.s
   Uses
      At line 102 in file OSasm.s
Comment: processPool used once
switched 00000000

Symbol: switched
   Definitions
      At line 16 in file OSasm.s
   Uses
      At line 63 in file OSasm.s
Comment: switched used once
traverseSleep 00000000



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols


Symbol: traverseSleep
   Definitions
      At line 15 in file OSasm.s
   Uses
      At line 163 in file OSasm.s
Comment: traverseSleep used once
8 symbols
358 symbols in table
