


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************/
    2 00000000         ; OS.s: low-level OS commands, written in assembly      
                                        */
    3 00000000         ; Runs on LM4F120/TM4C123
    4 00000000         ; OS functions.
    5 00000000         ; Ramon Villar, Kapil
    6 00000000         ; February, 9, 2016
    7 00000000         
    8 00000000         
    9 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   10 00000000                 THUMB
   11 00000000                 REQUIRE8
   12 00000000                 PRESERVE8
   13 00000000         
   14 00000000                 EXTERN           RunPt       ; currently running
                                                             thread
   15 00000000                 EXTERN           PF3Address
   16 00000000                 EXTERN           traverseSleep
   17 00000000                 EXTERN           switched
   18 00000000                 EXTERN           nextBeforeSwitch
   19 00000000                 EXTERN           higherPriorityAdded
   20 00000000                 EXTERN           SchedulerPt
   21 00000000                 EXTERN           OS_MsTime
   22 00000000                 EXTERN           timeWithInterruptsDisabled
   23 00000000                 EXTERN           startTimeOfInterruptsDisabled
   24 00000000                 EXTERN           endTimeOfInterruptsDisabled
   25 00000000                 EXPORT           OS_DisableInterrupts
   26 00000000                 EXPORT           OS_EnableInterrupts
   27 00000000                 EXPORT           PendSV_Handler
   28 00000000                 EXPORT           SysTick_Handler
   29 00000000                 EXPORT           StartOS
   30 00000000                 EXPORT           OS_StartCritical
   31 00000000                 EXPORT           OS_EndCritical
   32 00000000         
   33 00000000         
   34 00000000         
   35 00000000         
   36 00000000         ;*********** StartCritical ************************
   37 00000000         ; make a copy of previous I bit, disable interrupts
   38 00000000         ; inputs:  none
   39 00000000         ; outputs: previous I bit
   40 00000000         OS_StartCritical
   41 00000000 F3EF 8010       MRS              R0, PRIMASK ; save old status
   42 00000004 B672            CPSID            I           ; mask all (except 
                                                            faults)
   43 00000006 B501            PUSH{LR,         R0}         ;save R0 since it c
                                                            ontains old status
   44 00000008 F7FF FFFE       BL               OS_MsTime
   45 0000000C 4937            LDR              R1, =startTimeOfInterruptsDisab
led
   46 0000000E 6008            STR              R0, [R1]
   47 00000010 E8BD 4001       POP{LR,          R0}         ;restore status
   48 00000014 4770            BX               LR
   49 00000016         
   50 00000016         ;*********** EndCritical ************************
   51 00000016         ; using the copy of previous I bit, restore I bit to pre
                       vious value



ARM Macro Assembler    Page 2 


   52 00000016         ; inputs:  previous I bit
   53 00000016         ; outputs: none
   54 00000016         OS_EndCritical
   55 00000016 F380 8810       MSR              PRIMASK, R0
   56 0000001A 4A34            LDR              R2, =startTimeOfInterruptsDisab
led
   57 0000001C 6812            LDR              R2, [R2]    ;R2 has start time
   58 0000001E B504            PUSH{LR,         R2}
   59 00000020 F7FF FFFE       BL               OS_MsTime   ;R0 gets end time
   60 00000024 E8BD 4004       POP{LR,          R2}
   61 00000028 EBA2 0000       SUB              R0, R2, R0  ;R0 now has the tim
                                                            e diff
   62 0000002C 4930            LDR              R1, =timeWithInterruptsDisabled
   63 0000002E 680A            LDR              R2, [R1]
   64 00000030 4402            ADD              R2, R0, R2
   65 00000032 600A            STR              R2, [R1]
   66 00000034 4770            BX               LR
   67 00000036         
   68 00000036         
   69 00000036         OS_DisableInterrupts
   70 00000036 B672            CPSID            I
   71 00000038 B500            PUSH{LR}
   72 0000003A F7FF FFFE       BL               OS_MsTime
   73 0000003E F85D EB04       POP{LR}
   74 00000042 492A            LDR              R1, =startTimeOfInterruptsDisab
led
   75 00000044 6008            STR              R0, [R1]
   76 00000046 4770            BX               LR
   77 00000048         
   78 00000048         
   79 00000048         OS_EnableInterrupts
   80 00000048 4A28            LDR              R2, =startTimeOfInterruptsDisab
led
   81 0000004A 6812            LDR              R2, [R2]    ;R2 has start time
   82 0000004C B504            PUSH{LR,         R2}
   83 0000004E F7FF FFFE       BL               OS_MsTime   ;R0 gets end time
   84 00000052 E8BD 4004       POP{LR,          R2}
   85 00000056 EBA2 0000       SUB              R0, R2, R0  ;R0 now has the tim
                                                            e diff
   86 0000005A 4925            LDR              R1, =timeWithInterruptsDisabled
   87 0000005C 680A            LDR              R2, [R1]
   88 0000005E 4402            ADD              R2, R0, R2
   89 00000060 600A            STR              R2, [R1]
   90 00000062 B662            CPSIE            I
   91 00000064 4770            BX               LR
   92 00000066         
   93 00000066         StartOS
   94 00000066 4823            LDR              R0, =RunPt
   95 00000068 6802            LDR              R2, [R0]
   96 0000006A F8D2 D000       LDR              SP, [R2]    ;load localSP
   97 0000006E E8BD 0FF0       POP              {R4-R11}
   98 00000072 BC0F            POP              {R0-R3}
   99 00000074 F85D CB04       POP              {R12}
  100 00000078 F85D EB04       POP              {LR}        ;trash LR
  101 0000007C F85D EB04       POP              {LR}        ;PC on stack. the o
                                                            nly register that i
                                                            s not trash. points
                                                             to function that w
                                                            e want to run



ARM Macro Assembler    Page 3 


  102 00000080 BC02            POP              {R1}        ;discards last one 
                                                            PSR
  103 00000082 B662            CPSIE            I
  104 00000084 4770            BX               LR          ;LR contains the PC
                                                             we want to return 
                                                            to
  105 00000086         
  106 00000086         
  107 00000086         
  108 00000086         PendSV_Handler                       ; 1) Saves R0-R3,R1
                                                            2,LR,PC,PSR
  109 00000086 B672            CPSID            I
  110 00000088 E92D 0FF0       PUSH{R4-R11}                 ;push remaining reg
                                                            isters
  111 0000008C 4819            LDR              R0, =RunPt  ;old run pointer
  112 0000008E 6801            LDR              R1, [R0]    ;now R1 points the 
                                                            the current TCB run
                                                            ning
  113 00000090         ;this means R1 = TCB.localSP  
  114 00000090 F8C1 D000       STR              SP, [R1]    ;store stack into l
                                                            ocal stack pointer 
                                                            of TCB
  115 00000094         ;need to check if we went to sleep or killed 
  116 00000094 4A18            LDR              R2, =switched ;8bit variable
  117 00000096 7813            LDRB             R3, [R2]    ;loadvalue of flag
  118 00000098 2B00            CMP              R3, #0
  119 0000009A D10D            BNE              Switch_Routine
  120 0000009C 4A17            LDR              R2, =higherPriorityAdded
  121 0000009E 7813            LDRB             R3, [R2]    ;load value of flag
                                                            ... if 1, a higher 
                                                            priority was added 
                                                            and need to update 
                                                            runpt to beginning 
                                                            of list
  122 000000A0 2B00            CMP              R3, #0
  123 000000A2 D100            BNE              Higher_Priority_Switch
  124 000000A4 D011            BEQ              Normal_Context_Switch
  125 000000A6         Higher_Priority_Switch
  126 000000A6 F04F 0300       MOV              R3,#0       ;constant to clear 
                                                            the flag
  127 000000AA 7013            STRB             R3,[R2]     ;clear the flag, fl
                                                            ag was 1
  128 000000AC 4914            LDR              R1, =SchedulerPt
  129 000000AE 6809            LDR              R1, [R1]    ;R1 now points to h
                                                            igher priority thre
                                                            ad
  130 000000B0 6001            STR              R1, [R0]    ;update runPt
  131 000000B2 F8D1 D000       LDR              SP, [R1]    ;localSp to SP
  132 000000B6 E00C            B                END_ROUTINE
  133 000000B8         Switch_Routine                       ;used for kill and 
                                                            sleep
  134 000000B8 F04F 0300       MOV              R3,#0
  135 000000BC 7013            STRB             R3, [R2]    ;clear the flag
  136 000000BE 4911            LDR              R1, =nextBeforeSwitch
  137 000000C0 6809            LDR              R1, [R1]    ;now points to tcb 
                                                            that we want to run
                                                            
  138 000000C2 6001            STR              R1, [R0]    ;update runPT
  139 000000C4 F8D1 D000       LDR              SP, [R1]



ARM Macro Assembler    Page 4 


  140 000000C8 E003            B                END_ROUTINE
  141 000000CA         Normal_Context_Switch
  142 000000CA 6849            LDR              R1, [R1,#4] ;load nextpt
  143 000000CC 6001            STR              R1, [R0]    ;update RunPt
  144 000000CE F8D1 D000       LDR              SP, [R1]    ;R1 points to the f
                                                            irst element of the
                                                             struct we want to 
                                                            switch to
  145 000000D2         END_ROUTINE
  146 000000D2 E8BD 0FF0       POP              {R4-R11}    ;pop remainining re
                                                            gisters
  147 000000D6 B662            CPSIE            I
  148 000000D8 4770            BX               LR
  149 000000DA         
  150 000000DA         
  151 000000DA         SysTick_Handler                      ; 1) Saves R0-R3,R1
                                                            2,LR,PC,PSR
  152 000000DA B672            CPSID            I
  153 000000DC         ;PUSH{R4-R11} ;push remaining registers
  154 000000DC         ;LDR R0, =RunPt ;old run pointer
  155 000000DC         ;LDR R1, [R0] ;now R1 points the the current TCB running
                       
  156 000000DC         ;this means R1 = TCB.localSP  
  157 000000DC         ;STR SP, [R1] ;store stack into local stack pointer of T
                       CB
  158 000000DC         ;added
  159 000000DC B503            PUSH{R0-R1,      LR}
  160 000000DE F7FF FFFE       BL               traverseSleep
  161 000000E2 E8BD 4003       POP{R0-R1,       LR}
  162 000000E6         ;added
  163 000000E6         ;LDR R1, [R1,#4] ;load nextpt
  164 000000E6         ;STR R1, [R0] ;update RunPt
  165 000000E6         ;LDR SP, [R1] ;R1 points to the first element of the str
                       uct we want to switch to
  166 000000E6         ;POP {R4-R11} ;pop remainining registers
  167 000000E6 B662            CPSIE            I
  168 000000E8 4770            BX               LR
  169 000000EA         
  170 000000EA         
  171 000000EA 00 00           ALIGN
  172 000000EC                 END
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\osasm.
d -o.\osasm.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\Luminary --predefine="__EVAL SETA 1" --list=.\osasm.lst OSasm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 9 in file OSasm.s
   Uses
      None
Comment: .text unused
END_ROUTINE 000000D2

Symbol: END_ROUTINE
   Definitions
      At line 145 in file OSasm.s
   Uses
      At line 132 in file OSasm.s
      At line 140 in file OSasm.s

Higher_Priority_Switch 000000A6

Symbol: Higher_Priority_Switch
   Definitions
      At line 125 in file OSasm.s
   Uses
      At line 123 in file OSasm.s
Comment: Higher_Priority_Switch used once
Normal_Context_Switch 000000CA

Symbol: Normal_Context_Switch
   Definitions
      At line 141 in file OSasm.s
   Uses
      At line 124 in file OSasm.s
Comment: Normal_Context_Switch used once
OS_DisableInterrupts 00000036

Symbol: OS_DisableInterrupts
   Definitions
      At line 69 in file OSasm.s
   Uses
      At line 25 in file OSasm.s
Comment: OS_DisableInterrupts used once
OS_EnableInterrupts 00000048

Symbol: OS_EnableInterrupts
   Definitions
      At line 79 in file OSasm.s
   Uses
      At line 26 in file OSasm.s
Comment: OS_EnableInterrupts used once
OS_EndCritical 00000016

Symbol: OS_EndCritical
   Definitions
      At line 54 in file OSasm.s
   Uses
      At line 31 in file OSasm.s
Comment: OS_EndCritical used once
OS_StartCritical 00000000




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: OS_StartCritical
   Definitions
      At line 40 in file OSasm.s
   Uses
      At line 30 in file OSasm.s
Comment: OS_StartCritical used once
PendSV_Handler 00000086

Symbol: PendSV_Handler
   Definitions
      At line 108 in file OSasm.s
   Uses
      At line 27 in file OSasm.s
Comment: PendSV_Handler used once
StartOS 00000066

Symbol: StartOS
   Definitions
      At line 93 in file OSasm.s
   Uses
      At line 29 in file OSasm.s
Comment: StartOS used once
Switch_Routine 000000B8

Symbol: Switch_Routine
   Definitions
      At line 133 in file OSasm.s
   Uses
      At line 119 in file OSasm.s
Comment: Switch_Routine used once
SysTick_Handler 000000DA

Symbol: SysTick_Handler
   Definitions
      At line 151 in file OSasm.s
   Uses
      At line 28 in file OSasm.s
Comment: SysTick_Handler used once
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OS_MsTime 00000000

Symbol: OS_MsTime
   Definitions
      At line 21 in file OSasm.s
   Uses
      At line 44 in file OSasm.s
      At line 59 in file OSasm.s
      At line 72 in file OSasm.s
      At line 83 in file OSasm.s

PF3Address 00000000

Symbol: PF3Address
   Definitions
      At line 15 in file OSasm.s
   Uses
      None
Comment: PF3Address unused
RunPt 00000000

Symbol: RunPt
   Definitions
      At line 14 in file OSasm.s
   Uses
      At line 94 in file OSasm.s
      At line 111 in file OSasm.s

SchedulerPt 00000000

Symbol: SchedulerPt
   Definitions
      At line 20 in file OSasm.s
   Uses
      At line 128 in file OSasm.s
Comment: SchedulerPt used once
endTimeOfInterruptsDisabled 00000000

Symbol: endTimeOfInterruptsDisabled
   Definitions
      At line 24 in file OSasm.s
   Uses
      None
Comment: endTimeOfInterruptsDisabled unused
higherPriorityAdded 00000000

Symbol: higherPriorityAdded
   Definitions
      At line 19 in file OSasm.s
   Uses
      At line 120 in file OSasm.s
Comment: higherPriorityAdded used once
nextBeforeSwitch 00000000

Symbol: nextBeforeSwitch
   Definitions
      At line 18 in file OSasm.s
   Uses
      At line 136 in file OSasm.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

Comment: nextBeforeSwitch used once
startTimeOfInterruptsDisabled 00000000

Symbol: startTimeOfInterruptsDisabled
   Definitions
      At line 23 in file OSasm.s
   Uses
      At line 45 in file OSasm.s
      At line 56 in file OSasm.s
      At line 74 in file OSasm.s
      At line 80 in file OSasm.s

switched 00000000

Symbol: switched
   Definitions
      At line 17 in file OSasm.s
   Uses
      At line 116 in file OSasm.s
Comment: switched used once
timeWithInterruptsDisabled 00000000

Symbol: timeWithInterruptsDisabled
   Definitions
      At line 22 in file OSasm.s
   Uses
      At line 62 in file OSasm.s
      At line 86 in file OSasm.s

traverseSleep 00000000

Symbol: traverseSleep
   Definitions
      At line 16 in file OSasm.s
   Uses
      At line 160 in file OSasm.s
Comment: traverseSleep used once
11 symbols
356 symbols in table
